name: Windows MinGW
on:
  workflow_dispatch:
   inputs:
      version: 
        description: '测试'
        required: false
jobs:
  build:
    name: Build
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          - qt_ver: 6.2.4
            qt_arch: "win64_mingw"
            qt_tools: "tools_mingw90"
            qt_tools_mingw_install: "mingw1120_64"
    env:
      targetName: HelloWorld.exe
    steps:
      # 安装Qt库
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          host: 'windows'
          target: 'desktop'
          tools: ${{ matrix.qt_tools }}
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: 'false'
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      # Qt5环境配置
      # - name: Qt 5 environment configuration
      #   if: ${{ startsWith( matrix.qt_ver, 5 ) }}
      #   shell: pwsh
      #   run: |
      #     Write-Output "${{ env.Qt5_DIR }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      #     Write-Output "${{ env.Qt5_DIR }}/../../Tools/${{ matrix.qt_tools_mingw_install }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      # Qt6环境配置
      - name: Qt 6 environment configuration
        if: ${{ startsWith( matrix.qt_ver, 6 ) }}
        shell: pwsh
        run: |
          Write-Output "${{ env.Qt6_DIR }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Output "${{ env.Qt6_DIR }}/../../Tools/${{ matrix.qt_tools_mingw_install }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      # - name: where is qmake & where is mingw32-make
      #   shell: pwsh
      #   run: |
      #     Get-Command -Name 'qmake' | Format-List
      #     Get-Command -Name 'mingw32-make' | Format-List
      
      - name: mingw-build
        id: build
        shell: cmd
        run: |
          qmake
          mingw32-make
          
      - name: package
        id: package      
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_arch }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${env:archiveName}
          # 拷贝exe
          Copy-Item release\${env:targetName} ${env:archiveName}\
          # 拷贝依赖
          # --no-translations  无多国语言
          # --no-opengl-sw  无openGL
          # --no-system-d3d-compiler
          # --plugindir release/plugins
          # --no-svg  无矢量图片
          windeployqt --qmldir . --plugindir ${env:archiveName}\plugins --no-translations --no-opengl-sw --no-system-d3d-compiler --compiler-runtime ${env:archiveName}\${env:targetName}
          # # 删除不必要的文件
          # $excludeList = @("*.qmlc", "*.ilk", "*.exp", "*.lib", "*.pdb")
          # Remove-Item -Path ${env:archiveName} -Include $excludeList -Recurse -Force
          # 打包zip
          Compress-Archive -Path ${env:archiveName} ${env:archiveName}'.zip'

          echo "packageName=${env:archiveName}" >> $env:GITHUB_OUTPUT
           
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}
      # - name: uploadRelease
      #   if: startsWith(github.event.ref, 'refs/tags/')
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: ${{ steps.package.outputs.packageName }}.zip
      #     asset_name: ${{ steps.package.outputs.packageName }}.zip
      #     tag: ${{ github.ref }}
      #     overwrite: true 
